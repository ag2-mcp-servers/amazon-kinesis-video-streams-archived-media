# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:15:29+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel, conint, constr


class ClientLimitExceededException(RootModel[Any]):
    root: Any


class ClipFragmentSelectorType(Enum):
    PRODUCER_TIMESTAMP = 'PRODUCER_TIMESTAMP'
    SERVER_TIMESTAMP = 'SERVER_TIMESTAMP'


class ContainerFormat(Enum):
    FRAGMENTED_MP4 = 'FRAGMENTED_MP4'
    MPEG_TS = 'MPEG_TS'


class ContentType(
    RootModel[constr(pattern=r'^[a-zA-Z0-9_\.\-]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[a-zA-Z0-9_\.\-]+$', min_length=1, max_length=128)


class DASHDisplayFragmentNumber(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class DASHDisplayFragmentTimestamp(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class DASHFragmentSelectorType(Enum):
    PRODUCER_TIMESTAMP = 'PRODUCER_TIMESTAMP'
    SERVER_TIMESTAMP = 'SERVER_TIMESTAMP'


class DASHMaxResults(RootModel[conint(ge=1, le=5000)]):
    root: conint(ge=1, le=5000)


class DASHPlaybackMode(Enum):
    LIVE = 'LIVE'
    LIVE_REPLAY = 'LIVE_REPLAY'
    ON_DEMAND = 'ON_DEMAND'


class DASHStreamingSessionURL(RootModel[str]):
    root: str


class Expires(RootModel[conint(ge=300, le=43200)]):
    root: conint(ge=300, le=43200)


class Format(Enum):
    JPEG = 'JPEG'
    PNG = 'PNG'


class FormatConfigKey(Enum):
    JPEGQuality = 'JPEGQuality'


class FormatConfigValue(
    RootModel[constr(pattern=r'^[a-zA-Z_0-9]+', min_length=0, max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z_0-9]+', min_length=0, max_length=256)


class FragmentNumberString(
    RootModel[constr(pattern=r'^[0-9]+$', min_length=1, max_length=128)]
):
    root: constr(pattern=r'^[0-9]+$', min_length=1, max_length=128)


class FragmentSelectorType(Enum):
    PRODUCER_TIMESTAMP = 'PRODUCER_TIMESTAMP'
    SERVER_TIMESTAMP = 'SERVER_TIMESTAMP'


class GetDASHStreamingSessionURLOutput(BaseModel):
    DASHStreamingSessionURL_1: Optional[DASHStreamingSessionURL] = Field(
        None, alias='DASHStreamingSessionURL'
    )


class GetImagesMaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class HLSDiscontinuityMode(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'
    ON_DISCONTINUITY = 'ON_DISCONTINUITY'


class HLSDisplayFragmentTimestamp(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class HLSFragmentSelectorType(Enum):
    PRODUCER_TIMESTAMP = 'PRODUCER_TIMESTAMP'
    SERVER_TIMESTAMP = 'SERVER_TIMESTAMP'


class HLSMaxResults(RootModel[conint(ge=1, le=5000)]):
    root: conint(ge=1, le=5000)


class HLSPlaybackMode(Enum):
    LIVE = 'LIVE'
    LIVE_REPLAY = 'LIVE_REPLAY'
    ON_DEMAND = 'ON_DEMAND'


class HLSStreamingSessionURL(RootModel[str]):
    root: str


class HeightPixels(RootModel[conint(ge=1, le=2160)]):
    root: conint(ge=1, le=2160)


class ImageContent(RootModel[constr(min_length=1, max_length=6291456)]):
    root: constr(min_length=1, max_length=6291456)


class ImageError(Enum):
    NO_MEDIA = 'NO_MEDIA'
    MEDIA_ERROR = 'MEDIA_ERROR'


class ImageSelectorType(Enum):
    PRODUCER_TIMESTAMP = 'PRODUCER_TIMESTAMP'
    SERVER_TIMESTAMP = 'SERVER_TIMESTAMP'


class InvalidArgumentException(RootModel[Any]):
    root: Any


class InvalidCodecPrivateDataException(RootModel[Any]):
    root: Any


class InvalidMediaFrameException(RootModel[Any]):
    root: Any


class ListFragmentsMaxResults(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class Long(RootModel[int]):
    root: int


class MissingCodecPrivateDataException(RootModel[Any]):
    root: Any


class NextToken(
    RootModel[constr(pattern=r'[a-zA-Z0-9+/]+={0,2}', min_length=1, max_length=4096)]
):
    root: constr(pattern=r'[a-zA-Z0-9+/]+={0,2}', min_length=1, max_length=4096)


class NoDataRetentionException(RootModel[Any]):
    root: Any


class NotAuthorizedException(RootModel[Any]):
    root: Any


class Payload(RootModel[str]):
    root: str


class ResourceARN(
    RootModel[
        constr(
            pattern=r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ]
):
    root: constr(
        pattern=r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
        min_length=1,
        max_length=1024,
    )


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class SamplingInterval(RootModel[conint(ge=3000, le=20000)]):
    root: conint(ge=3000, le=20000)


class StreamName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)


class Timestamp(RootModel[datetime]):
    root: datetime


class TimestampRange(BaseModel):
    EndTimestamp: Timestamp
    StartTimestamp: Timestamp


class UnsupportedStreamMediaTypeException(RootModel[Any]):
    root: Any


class WidthPixels(RootModel[conint(ge=1, le=3840)]):
    root: conint(ge=1, le=3840)


class DisplayFragmentNumber(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class DisplayFragmentTimestamp(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'


class PlaybackMode(Enum):
    LIVE = 'LIVE'
    LIVE_REPLAY = 'LIVE_REPLAY'
    ON_DEMAND = 'ON_DEMAND'


class DiscontinuityMode(Enum):
    ALWAYS = 'ALWAYS'
    NEVER = 'NEVER'
    ON_DISCONTINUITY = 'ON_DISCONTINUITY'


class GetImagesPostRequest(BaseModel):
    EndTimestamp: datetime = Field(
        ..., description='The end timestamp for the range of images to be generated.'
    )
    Format_1: Format = Field(
        ...,
        alias='Format',
        description='The format that will be used to encode the image.',
    )
    FormatConfig: Optional[Dict[str, FormatConfigValue]] = Field(
        None,
        description='The list of a key-value pair structure that contains extra parameters that can be applied when the image is generated. The <code>FormatConfig</code> key is the <code>JPEGQuality</code>, which indicates the JPEG quality key to be used to generate the image. The <code>FormatConfig</code> value accepts ints from 1 to 100. If the value is 1, the image will be generated with less quality and the best compression. If the value is 100, the image will be generated with the best quality and less compression. If no value is provided, the default value of the <code>JPEGQuality</code> key will be set to 80.',
    )
    HeightPixels: Optional[conint(ge=1, le=2160)] = Field(
        None,
        description='The height of the output image that is used in conjunction with the <code>WidthPixels</code> parameter. When both <code>HeightPixels</code> and <code>WidthPixels</code> parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the <code>HeightPixels</code> parameter is provided, its original aspect ratio will be used to calculate the <code>WidthPixels</code> ratio. If neither parameter is provided, the original image size will be returned.',
    )
    ImageSelectorType_1: ImageSelectorType = Field(
        ...,
        alias='ImageSelectorType',
        description='The origin of the Server or Producer timestamps to use to generate the images.',
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='<p>The maximum number of images to be returned by the API. </p> <note> <p>The default limit is 100 images per API response. The additional results will be paginated. </p> </note>',
    )
    NextToken: Optional[
        constr(pattern=r'[a-zA-Z0-9+/]+={0,2}', min_length=1, max_length=4096)
    ] = Field(
        None,
        description='A token that specifies where to start paginating the next set of Images. This is the <code>GetImages:NextToken</code> from a previously truncated response.',
    )
    SamplingInterval: conint(ge=3000, le=20000) = Field(
        ...,
        description='<p>The time interval in milliseconds (ms) at which the images need to be generated from the stream. The minimum value that can be provided is 3000 ms. If the timestamp range is less than the sampling interval, the Image from the <code>startTimestamp</code> will be returned if available. </p> <note> <p>The minimum value of 3000 ms is a soft limit. If needed, a lower sampling frequency can be requested.</p> </note>',
    )
    StartTimestamp: datetime = Field(
        ...,
        description='The starting point from which the images should be generated. This <code>StartTimestamp</code> must be within an inclusive range of timestamps for an image to be returned.',
    )
    StreamARN: Optional[
        constr(
            pattern=r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the stream from which to retrieve the images. You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.',
    )
    StreamName: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description='The name of the stream from which to retrieve the images. You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.',
    )
    WidthPixels: Optional[conint(ge=1, le=3840)] = Field(
        None,
        description='The width of the output image that is used in conjunction with the <code>HeightPixels</code> parameter. When both <code>WidthPixels</code> and <code>HeightPixels</code> parameters are provided, the image will be stretched to fit the specified aspect ratio. If only the <code>WidthPixels</code> parameter is provided or if only the <code>HeightPixels</code> is provided, a <code>ValidationException</code> will be thrown. If neither parameter is provided, the original image size from the stream will be returned.',
    )


class GetMediaForFragmentListPostRequest(BaseModel):
    Fragments: List[FragmentNumberString] = Field(
        ...,
        description='A list of the numbers of fragments for which to retrieve media. You retrieve these values with <a>ListFragments</a>.',
        max_length=1000,
        min_length=1,
    )
    StreamARN: Optional[
        constr(
            pattern=r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the stream from which to retrieve fragment media. Specify either this parameter or the <code>StreamName</code> parameter.',
    )
    StreamName: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description='The name of the stream from which to retrieve fragment media. Specify either this parameter or the <code>StreamARN</code> parameter.',
    )


class FragmentSelector1(BaseModel):
    FragmentSelectorType_1: Optional[FragmentSelectorType] = Field(
        None, alias='FragmentSelectorType'
    )
    TimestampRange_1: Optional[TimestampRange] = Field(None, alias='TimestampRange')


class ListFragmentsPostRequest(BaseModel):
    FragmentSelector: Optional[FragmentSelector1] = Field(
        None,
        description='<p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Only fragments with a start timestamp greater than or equal to the given start time and less than or equal to the end time are returned. For example, if a stream contains fragments with the following start timestamps: </p> <ul> <li> <p>00:00:00</p> </li> <li> <p>00:00:02</p> </li> <li> <p>00:00:04</p> </li> <li> <p>00:00:06</p> </li> </ul> <p> A fragment selector range with a start time of 00:00:01 and end time of 00:00:04 would return the fragments with start times of 00:00:02 and 00:00:04. </p>',
    )
    MaxResults: Optional[conint(ge=1, le=1000)] = Field(
        None,
        description='The total number of fragments to return. If the total number of fragments available is more than the value specified in <code>max-results</code>, then a <a>ListFragmentsOutput$NextToken</a> is provided in the output that you can use to resume pagination.',
    )
    NextToken: Optional[
        constr(pattern=r'[a-zA-Z0-9+/]+={0,2}', min_length=1, max_length=4096)
    ] = Field(
        None,
        description='A token to specify where to start paginating. This is the <a>ListFragmentsOutput$NextToken</a> from a previously truncated response.',
    )
    StreamARN: Optional[
        constr(
            pattern=r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of the stream from which to retrieve a fragment list. Specify either this parameter or the <code>StreamName</code> parameter.',
    )
    StreamName: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description='The name of the stream from which to retrieve a fragment list. Specify either this parameter or the <code>StreamARN</code> parameter.',
    )


class ClipTimestampRange(BaseModel):
    EndTimestamp: Timestamp
    StartTimestamp: Timestamp


class DASHTimestampRange(BaseModel):
    EndTimestamp: Optional[Timestamp] = None
    StartTimestamp: Optional[Timestamp] = None


class FormatConfig(RootModel[Optional[Dict[str, FormatConfigValue]]]):
    root: Optional[Dict[str, FormatConfigValue]] = None


class Fragment(BaseModel):
    FragmentLengthInMilliseconds: Optional[Long] = None
    FragmentNumber: Optional[FragmentNumberString] = None
    FragmentSizeInBytes: Optional[Long] = None
    ProducerTimestamp: Optional[Timestamp] = None
    ServerTimestamp: Optional[Timestamp] = None


class FragmentList(RootModel[List[Fragment]]):
    root: List[Fragment]


class FragmentNumberList(RootModel[List[FragmentNumberString]]):
    root: List[FragmentNumberString] = Field(..., max_length=1000, min_length=1)


class FragmentSelector(BaseModel):
    FragmentSelectorType_1: FragmentSelectorType = Field(
        ..., alias='FragmentSelectorType'
    )
    TimestampRange_1: TimestampRange = Field(..., alias='TimestampRange')


class GetClipOutput(BaseModel):
    Payload_1: Optional[Payload] = Field(None, alias='Payload')


class GetHLSStreamingSessionURLOutput(BaseModel):
    HLSStreamingSessionURL_1: Optional[HLSStreamingSessionURL] = Field(
        None, alias='HLSStreamingSessionURL'
    )


class GetImagesInput(BaseModel):
    EndTimestamp: Timestamp
    Format_1: Format = Field(..., alias='Format')
    FormatConfig_1: Optional[FormatConfig] = Field(None, alias='FormatConfig')
    HeightPixels_1: Optional[HeightPixels] = Field(None, alias='HeightPixels')
    ImageSelectorType_1: ImageSelectorType = Field(..., alias='ImageSelectorType')
    MaxResults: Optional[GetImagesMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SamplingInterval_1: SamplingInterval = Field(..., alias='SamplingInterval')
    StartTimestamp: Timestamp
    StreamARN: Optional[ResourceARN] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
    WidthPixels_1: Optional[WidthPixels] = Field(None, alias='WidthPixels')


class GetMediaForFragmentListInput(BaseModel):
    Fragments: FragmentNumberList
    StreamARN: Optional[ResourceARN] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class GetMediaForFragmentListOutput(BaseModel):
    Payload_1: Optional[Payload] = Field(None, alias='Payload')


class HLSTimestampRange(BaseModel):
    EndTimestamp: Optional[Timestamp] = None
    StartTimestamp: Optional[Timestamp] = None


class Image(BaseModel):
    Error: Optional[ImageError] = None
    ImageContent_1: Optional[ImageContent] = Field(None, alias='ImageContent')
    TimeStamp: Optional[Timestamp] = None


class Images(RootModel[List[Image]]):
    root: List[Image]


class ListFragmentsInput(BaseModel):
    FragmentSelector_1: Optional[FragmentSelector] = Field(
        None, alias='FragmentSelector'
    )
    MaxResults: Optional[ListFragmentsMaxResults] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    StreamARN: Optional[ResourceARN] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class ListFragmentsOutput(BaseModel):
    Fragments: Optional[FragmentList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ClipFragmentSelector1(BaseModel):
    FragmentSelectorType: Optional[ClipFragmentSelectorType] = None
    TimestampRange: Optional[ClipTimestampRange] = None


class GetClipPostRequest(BaseModel):
    ClipFragmentSelector: ClipFragmentSelector1 = Field(
        ...,
        description='<p>Describes the timestamp range and timestamp origin of a range of fragments.</p> <p>Fragments that have duplicate producer timestamps are deduplicated. This means that if producers are producing a stream of fragments with producer timestamps that are approximately equal to the true clock time, the clip will contain all of the fragments within the requested timestamp range. If some fragments are ingested within the same time range and very different points in time, only the oldest ingested collection of fragments are returned.</p>',
    )
    StreamARN: Optional[
        constr(
            pattern=r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ] = Field(
        None,
        description='<p>The Amazon Resource Name (ARN) of the stream for which to retrieve the media clip. </p> <p>You must specify either the StreamName or the StreamARN. </p>',
    )
    StreamName: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description='<p>The name of the stream for which to retrieve the media clip. </p> <p>You must specify either the StreamName or the StreamARN. </p>',
    )


class DASHFragmentSelector(BaseModel):
    FragmentSelectorType: Optional[DASHFragmentSelectorType] = None
    TimestampRange: Optional[DASHTimestampRange] = None


class GetDASHStreamingSessionURLPostRequest(BaseModel):
    DASHFragmentSelector_1: Optional[DASHFragmentSelector] = Field(
        None,
        alias='DASHFragmentSelector',
        description='Contains the range of timestamps for the requested media, and the source of the timestamps. ',
    )
    DisplayFragmentNumber_1: Optional[DisplayFragmentNumber] = Field(
        None,
        alias='DisplayFragmentNumber',
        description='<p>Fragments are identified in the manifest file based on their sequence number in the session. If DisplayFragmentNumber is set to <code>ALWAYS</code>, the Kinesis Video Streams fragment number is added to each S element in the manifest file with the attribute name “kvs:fn”. These fragment numbers can be used for logging or for use with other APIs (e.g. <code>GetMedia</code> and <code>GetMediaForFragmentList</code>). A custom MPEG-DASH media player is necessary to leverage these this custom attribute.</p> <p>The default value is <code>NEVER</code>.</p>',
    )
    DisplayFragmentTimestamp_1: Optional[DisplayFragmentTimestamp] = Field(
        None,
        alias='DisplayFragmentTimestamp',
        description='<p>Per the MPEG-DASH specification, the wall-clock time of fragments in the manifest file can be derived using attributes in the manifest itself. However, typically, MPEG-DASH compatible media players do not properly handle gaps in the media timeline. Kinesis Video Streams adjusts the media timeline in the manifest file to enable playback of media with discontinuities. Therefore, the wall-clock time derived from the manifest file may be inaccurate. If DisplayFragmentTimestamp is set to <code>ALWAYS</code>, the accurate fragment timestamp is added to each S element in the manifest file with the attribute name “kvs:ts”. A custom MPEG-DASH media player is necessary to leverage this custom attribute.</p> <p>The default value is <code>NEVER</code>. When <a>DASHFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>, the timestamps will be the server start timestamps. Similarly, when <a>DASHFragmentSelector</a> is <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the producer start timestamps. </p>',
    )
    Expires: Optional[conint(ge=300, le=43200)] = Field(
        None,
        description='<p>The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours).</p> <p>When a session expires, no new calls to <code>GetDashManifest</code>, <code>GetMP4InitFragment</code>, or <code>GetMP4MediaFragment</code> can be made for that session.</p> <p>The default is 300 (5 minutes).</p>',
    )
    MaxManifestFragmentResults: Optional[conint(ge=1, le=5000)] = Field(
        None,
        description='<p>The maximum number of fragments that are returned in the MPEG-DASH manifest.</p> <p>When the <code>PlaybackMode</code> is <code>LIVE</code>, the most recent fragments are returned up to this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>, the oldest fragments are returned, up to this maximum number.</p> <p>When there are a higher number of fragments available in a live MPEG-DASH manifest, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live MPEG-DASH manifest have a minimum of 3 fragments and a maximum of 10 fragments.</p> <p>The default is 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or <code>LIVE_REPLAY</code>, and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>. </p> <p>The maximum value of 1,000 fragments corresponds to more than 16 minutes of video on streams with 1-second fragments, and more than 2 1/2 hours of video on streams with 10-second fragments.</p>',
    )
    PlaybackMode_1: Optional[PlaybackMode] = Field(
        None,
        alias='PlaybackMode',
        description='<p>Whether to retrieve live, live replay, or archived, on-demand data.</p> <p>Features of the three types of sessions include the following:</p> <ul> <li> <p> <b> <code>LIVE</code> </b>: For sessions of this type, the MPEG-DASH manifest is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new manifest on a one-second interval. When this type of session is played in a media player, the user interface typically displays a "live" notification, with no scrubber control for choosing the position in the playback window to display.</p> <note> <p>In <code>LIVE</code> mode, the newest available fragments are included in an MPEG-DASH manifest, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the MPEG-DASH manifest if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the manifest, the older fragment is not added, and the gap is not filled.</p> </note> </li> <li> <p> <b> <code>LIVE_REPLAY</code> </b>: For sessions of this type, the MPEG-DASH manifest is updated similarly to how it is updated for <code>LIVE</code> mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the manifest every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the <code>ON_DEMAND</code> mode. </p> </li> <li> <p> <b> <code>ON_DEMAND</code> </b>: For sessions of this type, the MPEG-DASH manifest contains all the fragments for the session, up to the number that is specified in <code>MaxManifestFragmentResults</code>. The manifest must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.</p> </li> </ul> <p>In all playback modes, if <code>FragmentSelectorType</code> is <code>PRODUCER_TIMESTAMP</code>, and if there are multiple fragments with the same start timestamp, the fragment that has the larger fragment number (that is, the newer fragment) is included in the MPEG-DASH manifest. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the MPEG-DASH manifest. This can lead to unexpected behavior in the media player.</p> <p>The default is <code>LIVE</code>.</p>',
    )
    StreamARN: Optional[
        constr(
            pattern=r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ] = Field(
        None,
        description='<p>The Amazon Resource Name (ARN) of the stream for which to retrieve the MPEG-DASH manifest URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>',
    )
    StreamName: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description='<p>The name of the stream for which to retrieve the MPEG-DASH manifest URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>',
    )


class HLSFragmentSelector(BaseModel):
    FragmentSelectorType: Optional[HLSFragmentSelectorType] = None
    TimestampRange: Optional[HLSTimestampRange] = None


class GetHLSStreamingSessionURLPostRequest(BaseModel):
    ContainerFormat_1: Optional[ContainerFormat] = Field(
        None,
        alias='ContainerFormat',
        description='<p>Specifies which format should be used for packaging the media. Specifying the <code>FRAGMENTED_MP4</code> container format packages the media into MP4 fragments (fMP4 or CMAF). This is the recommended packaging because there is minimal packaging overhead. The other container format option is <code>MPEG_TS</code>. HLS has supported MPEG TS chunks since it was released and is sometimes the only supported packaging on older HLS players. MPEG TS typically has a 5-25 percent packaging overhead. This means MPEG TS typically requires 5-25 percent more bandwidth and cost than fMP4.</p> <p>The default is <code>FRAGMENTED_MP4</code>.</p>',
    )
    DiscontinuityMode_1: Optional[DiscontinuityMode] = Field(
        None,
        alias='DiscontinuityMode',
        description='<p>Specifies when flags marking discontinuities between fragments are added to the media playlists.</p> <p>Media players typically build a timeline of media content to play, based on the timestamps of each fragment. This means that if there is any overlap or gap between fragments (as is typical if <a>HLSFragmentSelector</a> is set to <code>SERVER_TIMESTAMP</code>), the media player timeline will also have small gaps between fragments in some places, and will overwrite frames in other places. Gaps in the media player timeline can cause playback to stall and overlaps can cause playback to be jittery. When there are discontinuity flags between fragments, the media player is expected to reset the timeline, resulting in the next fragment being played immediately after the previous fragment. </p> <p>The following modes are supported:</p> <ul> <li> <p> <code>ALWAYS</code>: a discontinuity marker is placed between every fragment in the HLS media playlist. It is recommended to use a value of <code>ALWAYS</code> if the fragment timestamps are not accurate.</p> </li> <li> <p> <code>NEVER</code>: no discontinuity markers are placed anywhere. It is recommended to use a value of <code>NEVER</code> to ensure the media player timeline most accurately maps to the producer timestamps. </p> </li> <li> <p> <code>ON_DISCONTINUITY</code>: a discontinuity marker is placed between fragments that have a gap or overlap of more than 50 milliseconds. For most playback scenarios, it is recommended to use a value of <code>ON_DISCONTINUITY</code> so that the media player timeline is only reset when there is a significant issue with the media timeline (e.g. a missing fragment).</p> </li> </ul> <p>The default is <code>ALWAYS</code> when <a>HLSFragmentSelector</a> is set to <code>SERVER_TIMESTAMP</code>, and <code>NEVER</code> when it is set to <code>PRODUCER_TIMESTAMP</code>.</p>',
    )
    DisplayFragmentTimestamp_1: Optional[DisplayFragmentTimestamp] = Field(
        None,
        alias='DisplayFragmentTimestamp',
        description='<p>Specifies when the fragment start timestamps should be included in the HLS media playlist. Typically, media players report the playhead position as a time relative to the start of the first fragment in the playback session. However, when the start timestamps are included in the HLS media playlist, some media players might report the current playhead as an absolute time based on the fragment timestamps. This can be useful for creating a playback experience that shows viewers the wall-clock time of the media.</p> <p>The default is <code>NEVER</code>. When <a>HLSFragmentSelector</a> is <code>SERVER_TIMESTAMP</code>, the timestamps will be the server start timestamps. Similarly, when <a>HLSFragmentSelector</a> is <code>PRODUCER_TIMESTAMP</code>, the timestamps will be the producer start timestamps. </p>',
    )
    Expires: Optional[conint(ge=300, le=43200)] = Field(
        None,
        description='<p>The time in seconds until the requested session expires. This value can be between 300 (5 minutes) and 43200 (12 hours).</p> <p>When a session expires, no new calls to <code>GetHLSMasterPlaylist</code>, <code>GetHLSMediaPlaylist</code>, <code>GetMP4InitFragment</code>, <code>GetMP4MediaFragment</code>, or <code>GetTSFragment</code> can be made for that session.</p> <p>The default is 300 (5 minutes).</p>',
    )
    HLSFragmentSelector_1: Optional[HLSFragmentSelector] = Field(
        None,
        alias='HLSFragmentSelector',
        description='Contains the range of timestamps for the requested media, and the source of the timestamps.',
    )
    MaxMediaPlaylistFragmentResults: Optional[conint(ge=1, le=5000)] = Field(
        None,
        description='<p>The maximum number of fragments that are returned in the HLS media playlists.</p> <p>When the <code>PlaybackMode</code> is <code>LIVE</code>, the most recent fragments are returned up to this value. When the <code>PlaybackMode</code> is <code>ON_DEMAND</code>, the oldest fragments are returned, up to this maximum number.</p> <p>When there are a higher number of fragments available in a live HLS media playlist, video players often buffer content before starting playback. Increasing the buffer size increases the playback latency, but it decreases the likelihood that rebuffering will occur during playback. We recommend that a live HLS media playlist have a minimum of 3 fragments and a maximum of 10 fragments.</p> <p>The default is 5 fragments if <code>PlaybackMode</code> is <code>LIVE</code> or <code>LIVE_REPLAY</code>, and 1,000 if <code>PlaybackMode</code> is <code>ON_DEMAND</code>. </p> <p>The maximum value of 5,000 fragments corresponds to more than 80 minutes of video on streams with 1-second fragments, and more than 13 hours of video on streams with 10-second fragments.</p>',
    )
    PlaybackMode_1: Optional[PlaybackMode] = Field(
        None,
        alias='PlaybackMode',
        description='<p>Whether to retrieve live, live replay, or archived, on-demand data.</p> <p>Features of the three types of sessions include the following:</p> <ul> <li> <p> <b> <code>LIVE</code> </b>: For sessions of this type, the HLS media playlist is continually updated with the latest fragments as they become available. We recommend that the media player retrieve a new playlist on a one-second interval. When this type of session is played in a media player, the user interface typically displays a "live" notification, with no scrubber control for choosing the position in the playback window to display.</p> <note> <p>In <code>LIVE</code> mode, the newest available fragments are included in an HLS media playlist, even if there is a gap between fragments (that is, if a fragment is missing). A gap like this might cause a media player to halt or cause a jump in playback. In this mode, fragments are not added to the HLS media playlist if they are older than the newest fragment in the playlist. If the missing fragment becomes available after a subsequent fragment is added to the playlist, the older fragment is not added, and the gap is not filled.</p> </note> </li> <li> <p> <b> <code>LIVE_REPLAY</code> </b>: For sessions of this type, the HLS media playlist is updated similarly to how it is updated for <code>LIVE</code> mode except that it starts by including fragments from a given start time. Instead of fragments being added as they are ingested, fragments are added as the duration of the next fragment elapses. For example, if the fragments in the session are two seconds long, then a new fragment is added to the media playlist every two seconds. This mode is useful to be able to start playback from when an event is detected and continue live streaming media that has not yet been ingested as of the time of the session creation. This mode is also useful to stream previously archived media without being limited by the 1,000 fragment limit in the <code>ON_DEMAND</code> mode. </p> </li> <li> <p> <b> <code>ON_DEMAND</code> </b>: For sessions of this type, the HLS media playlist contains all the fragments for the session, up to the number that is specified in <code>MaxMediaPlaylistFragmentResults</code>. The playlist must be retrieved only once for each session. When this type of session is played in a media player, the user interface typically displays a scrubber control for choosing the position in the playback window to display.</p> </li> </ul> <p>In all playback modes, if <code>FragmentSelectorType</code> is <code>PRODUCER_TIMESTAMP</code>, and if there are multiple fragments with the same start timestamp, the fragment that has the largest fragment number (that is, the newest fragment) is included in the HLS media playlist. The other fragments are not included. Fragments that have different timestamps but have overlapping durations are still included in the HLS media playlist. This can lead to unexpected behavior in the media player.</p> <p>The default is <code>LIVE</code>.</p>',
    )
    StreamARN: Optional[
        constr(
            pattern=r'arn:[a-z\d-]+:kinesisvideo:[a-z0-9-]+:[0-9]+:[a-z]+/[a-zA-Z0-9_.-]+/[0-9]+',
            min_length=1,
            max_length=1024,
        )
    ] = Field(
        None,
        description='<p>The Amazon Resource Name (ARN) of the stream for which to retrieve the HLS master playlist URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>',
    )
    StreamName: Optional[
        constr(pattern=r'[a-zA-Z0-9_.-]+', min_length=1, max_length=256)
    ] = Field(
        None,
        description='<p>The name of the stream for which to retrieve the HLS master playlist URL.</p> <p>You must specify either the <code>StreamName</code> or the <code>StreamARN</code>.</p>',
    )


class ClipFragmentSelector(BaseModel):
    FragmentSelectorType: ClipFragmentSelectorType
    TimestampRange: ClipTimestampRange


class GetClipInput(BaseModel):
    ClipFragmentSelector_1: ClipFragmentSelector = Field(
        ..., alias='ClipFragmentSelector'
    )
    StreamARN: Optional[ResourceARN] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class GetDASHStreamingSessionURLInput(BaseModel):
    DASHFragmentSelector_1: Optional[DASHFragmentSelector] = Field(
        None, alias='DASHFragmentSelector'
    )
    DisplayFragmentNumber: Optional[DASHDisplayFragmentNumber] = None
    DisplayFragmentTimestamp: Optional[DASHDisplayFragmentTimestamp] = None
    Expires_1: Optional[Expires] = Field(None, alias='Expires')
    MaxManifestFragmentResults: Optional[DASHMaxResults] = None
    PlaybackMode: Optional[DASHPlaybackMode] = None
    StreamARN: Optional[ResourceARN] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')


class GetImagesOutput(BaseModel):
    Images_1: Optional[Images] = Field(None, alias='Images')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetHLSStreamingSessionURLInput(BaseModel):
    ContainerFormat_1: Optional[ContainerFormat] = Field(None, alias='ContainerFormat')
    DiscontinuityMode: Optional[HLSDiscontinuityMode] = None
    DisplayFragmentTimestamp: Optional[HLSDisplayFragmentTimestamp] = None
    Expires_1: Optional[Expires] = Field(None, alias='Expires')
    HLSFragmentSelector_1: Optional[HLSFragmentSelector] = Field(
        None, alias='HLSFragmentSelector'
    )
    MaxMediaPlaylistFragmentResults: Optional[HLSMaxResults] = None
    PlaybackMode: Optional[HLSPlaybackMode] = None
    StreamARN: Optional[ResourceARN] = None
    StreamName_1: Optional[StreamName] = Field(None, alias='StreamName')
